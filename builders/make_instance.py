
def make_instance(argv = (), usage = False, verbose = False):
  # /* ... */
  def typed_comment(key, val):
    out.append('')
    out.append('/* {} */'.format(val))

  # constexpr bool
  def typed_bool(key, val):
    cval = ''
    if val.lower() in ['1', 'y', 'yes', 'true']:
      cval = 'true'
    elif val.lower() in ['0', 'n', 'no', 'false']:
      cval = 'false'
    else:
      raise ValueError

    out.append('constexpr bool {} = {};'.format(key, cval))

  # constexpr std::size_t
  def typed_size_t(key, val):
    if int(val) <= 0:
      raise ValueError

    out.append('constexpr std::size_t {} = {};'.format(key, int(val)))

  # constexpr double
  def typed_double(key, val):
    if float(val) <= 0:
      raise ValueError

    out.append('constexpr double {} = {};'.format(key, float(val)))

  # define the set of acceptable parameters,
  # with their types and default values.
  params = {
    '1': (typed_comment, 'problem sizes'),
    'm': (typed_size_t, 50),
    'n': (typed_size_t, 100),

    '2':     (typed_comment, 'problem data initializers'),
    'unif':  (typed_bool, True),
    'k':     (typed_size_t, 10),
    'sigma': (typed_double, 0.005),
    'seed':  (typed_size_t, 47351),

    '3':      (typed_comment, 'weight prior parameters'),
    'alpha':  (typed_double, 0.001),
    'beta':   (typed_double, 0.001),

    '4':      (typed_comment, 'noise prior parameters'),
    'nu':     (typed_double, 50),
    'lambda': (typed_double, 0.00125),

    '5':     (typed_comment, 'algorithm parameters'),
    'iters': (typed_size_t, 11000),
    'burn':  (typed_size_t, 1000),
    'thin':  (typed_size_t, 1)
  }

  # build the header of the instance file.
  out = []
  out.append('')
  out.append('/* Generated by build.py */')
  out.append('#pragma once')
  out.append('#include <cstddef>')

  # get the set of key-value pairs from the arguments.
  pairs = [arg.split('=') for arg in argv]

  # check that all keys have values.
  if not all(len(pair) == 2 for pair in pairs):
    print('/* Invalid arguments:')
    print(' *  {}'.format(' '.join(argv)))
    print(' */')
    return

  # loop over the parameter table.
  for param in params:
    # get the type function and the default value.
    (fn, default) = params[param]

    # check if the parameter was given in the arguments.
    value = str(default)
    if param in (pair[0] for pair in pairs):
      # get the associated value.
      value = [pair[1] for pair in pairs][0]

      # remove the key-value pair from the arguments.
      pairs.remove([param, value])

    # write the parameter and its value.
    fn(param, value)

  # check if any pairs remain.
  if len(pairs):
    print('/* Invalid arguments:')
    print(' *  {}'.format(' '.join(['='.join(pair) for pair in pairs])))
    print(' */')
    return

  # build the footer of the instance file.
  out.append('')
  out.append('#include "inst_base.hh"')
  out.append('')

  # write the final file contents.
  print('\n'.join(out))

