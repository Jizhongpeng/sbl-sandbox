
def make_instance(argv = (), usage = False, verbose = False):
  # write_bool(): handles 'constexpr bool'
  #
  def write_bool(key, val):
    cval = '';
    if val.lower() in ['1', 'y', 'yes', 'true']:
      cval = 'true'
    elif val.lower() in ['0', 'n', 'no', 'false']:
      cval = 'false'
    else:
      raise ValueError

    out.append('constexpr bool {} = {};'.format(key, cval))

  # write_size_t(): handles 'constexpr std::size_t'
  #
  def write_size_t(key, val):
    if int(val) <= 0:
      raise ValueError

    out.append('constexpr std::size_t {} = {};'.format(key, int(val)))

  # write_double(): handles 'constexpr double' with positive values.
  #
  def write_double(key, val):
    if float(val) <= 0:
      raise ValueError

    out.append('constexpr double {} = {};'.format(key, float(val)))

  # define the set of acceptable arguments, keyed by their handler function.
  table = {
    write_bool: ['unif'],
    write_size_t: ['m', 'n', 'k', 'seed', 'iters', 'burn', 'thin'],
    write_double: ['sigma', 'alpha', 'beta', 'nu', 'lambda']
  }

  # build the header of the instance file.
  out = []
  out.append('')
  out.append('/* Generated by mkinst.py */')
  out.append('#pragma once')
  out.append('#include <cstddef>')
  out.append('')

  # loop over all arguments.
  for arg in argv:
    # split the argument into fields.
    fields = arg.split('=')

    # check for arguments not conforming to key=val syntax.
    if len(fields) != 2:
      print('/* Invalid argument: "{}" */'.format(arg))
      sys.exit(1)

    # split the argument into its key and value.
    (key, val) = fields

    # try all possible means to accept the argument.
    accepted = False
    for (fn, accept) in table.items():
      if key in accept:
        try:
          fn(key, val)
          accepted = True
        except:
          print('/* Bad value "{}" for variable "{}"'.format(val, key))
          sys.exit(1)

    # check for unrecognized arguments.
    if not accepted:
      print('/* Unrecognized argument: "{}" */'.format(arg))
      sys.exit(1)

  # build the footer of the instance file.
  out.append('')
  out.append('#include "inst_base.hh"')
  out.append('')

  # write the final file contents.
  print('\n'.join(out))

